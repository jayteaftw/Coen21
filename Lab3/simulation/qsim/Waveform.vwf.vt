// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/17/2019 15:20:22"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          traficlight
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module traficlight_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CS;
reg LS;
reg RR;
reg RS;
// wires                                               
wire Cl;
wire LL;
wire RL;

// assign statements (if any)                          
traficlight i1 (
// port map - connection between master ports and signals/registers   
	.Cl(Cl),
	.CS(CS),
	.LL(LL),
	.LS(LS),
	.RL(RL),
	.RR(RR),
	.RS(RS)
);
initial 
begin 
#1000000 $finish;
end 

// CS
initial
begin
	repeat(2)
	begin
		CS = 1'b0;
		CS = #200000 1'b1;
		# 200000;
	end
	CS = 1'b0;
end 

// LS
always
begin
	LS = 1'b0;
	LS = #100000 1'b1;
	#100000;
end 

// RS
always
begin
	RS = 1'b0;
	RS = #50000 1'b1;
	#50000;
end 

// RR
always
begin
	RR = 1'b0;
	RR = #25000 1'b1;
	#25000;
end 
endmodule

